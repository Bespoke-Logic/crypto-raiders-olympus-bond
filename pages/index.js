import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useState, useEffect } from "react";
import useAlchemy from "../lib/useAlchemy";
import CoinGecko from "coingecko-api";
import CR_BOND_ABI from "../lib/contracts/crbond_abi.json";
import CR_SLP_ABI from "../lib/contracts/cr_slp_abi.json";

export default function Home() {
  const DECIMALS = 100000000000000000;
  const PRETTY_NUMBER = Intl.NumberFormat("en-US");
  const PRETTY_CURRENCY = Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  });
  const PRETTY_PERCENT = Intl.NumberFormat("en-US", {
    style: "percent",
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  });
  const [trueBondPrice, setTrueBondPrice] = useState(0);
  const [maticPrice, setMaticPrice] = useState(0);
  const [raiderPrice, setRaiderPrice] = useState(0);
  const [slpTotalSupply, setSlpTotalSupply] = useState(0);
  const [slpMaticReserves, setSlpMaticReserves] = useState(0);
  const [slpRaiderReserves, setSlpRaiderReserves] = useState(0);
  const [slpPrice, setSlpPrice] = useState(0);
  const [bondPrice, setBondPrice] = useState(0);
  const [roi, setRoi] = useState(0);
  const { useContract } = useAlchemy(process.env.NEXT_PUBLIC_ALCHEMY_API_KEY);
  const bondContract = useContract(
    "0xee57F4C39CEfA70Ce8D07767136e5F40042CCa1b",
    CR_BOND_ABI
  );
  const slpContract = useContract(
    "0x2e7d6490526c7d7e2fdea5c6ec4b0d1b9f8b25b7",
    CR_SLP_ABI
  );
  const CoinGeckoClient = new CoinGecko();
  const refreshBondPrice = async () => {
    const getTrueBondPrice = bondContract.methods.trueBondPrice().call();
    const getSlpTotalSupply = slpContract.methods.totalSupply().call();
    const getSlpReserves = slpContract.methods.getReserves().call();
    const getCoinPrices = CoinGeckoClient.simple.price({
      ids: ["crypto-raiders", "matic-network"],
      vs_currencies: ["usd"],
    });

    const results = await Promise.all([
      getTrueBondPrice,
      getCoinPrices,
      getSlpTotalSupply,
      getSlpReserves,
    ]);
    const trueBondPrice = results[0] / 10000000;
    setTrueBondPrice(trueBondPrice);
    const maticPrice = results[1].data["matic-network"]["usd"];
    setMaticPrice(maticPrice);
    const raiderPrice = results[1].data["crypto-raiders"]["usd"];
    setRaiderPrice(raiderPrice);
    const slpTotalSupply = Number(results[2]) / DECIMALS;
    setSlpTotalSupply(slpTotalSupply);
    const slpMaticReserves = Number(results[3]["0"] / DECIMALS);
    setSlpMaticReserves(slpMaticReserves);
    const slpRaiderReserves = Number(results[3]["1"] / DECIMALS);
    setSlpRaiderReserves(slpRaiderReserves);
    const slpValue =
      slpMaticReserves * maticPrice + slpRaiderReserves * raiderPrice;
    const slpPrice = slpValue / slpTotalSupply;
    setSlpPrice(slpPrice);
    const bondPrice = slpPrice * trueBondPrice;
    setBondPrice(bondPrice);
    const roi = raiderPrice / bondPrice - 1;
    setRoi(roi);
  };
  useEffect(() => {
    refreshBondPrice();
  });
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <dl>
          <dt>True Bond Price: </dt>
          <dd>{trueBondPrice}</dd>
          <dt>Matic Price: </dt>
          <dd>{PRETTY_CURRENCY.format(maticPrice)}</dd>
          <dt>Raider Price: </dt>
          <dd>{PRETTY_CURRENCY.format(raiderPrice)}</dd>
          <dt>SLP Total Supply: </dt>
          <dd>{PRETTY_NUMBER.format(slpTotalSupply)}</dd>
          <dt>SLP Matic Reserves: </dt>
          <dd>{PRETTY_NUMBER.format(slpMaticReserves)}</dd>
          <dt>SLP RaiderReserves: </dt>
          <dd>{PRETTY_NUMBER.format(slpRaiderReserves)}</dd>
          <dt>SLP Price: </dt>
          <dd>{PRETTY_CURRENCY.format(slpPrice)}</dd>
          <dt>Bond Price</dt>
          <dd>{PRETTY_CURRENCY.format(bondPrice)}</dd>
          <dt>ROI</dt>
          <dd>{PRETTY_PERCENT.format(roi)}</dd>
        </dl>
        <button onClick={() => refreshBondPrice()}>Refresh</button>
      </main>
    </div>
  );
}
